// grammar.lark

// common tokens
%import common.NEWLINE
%import common.WS_INLINE
%ignore WS_INLINE

// Start Rule
start: syntax function_definition+

// Language and case parameters
syntax: "Language" LANG NEWLINE "Case" CASE NEWLINE

// Function definition
function_definition: "function" TYPE ID "(" [params] ")" block

// Block definition
block: "{" NEWLINE? stmt+ (NEWLINE stmt+)* NEWLINE? "}"

// Statements
?stmt: assignment_stmt
     | declaration_stmt
     | if_stmt
     | while_stmt
     | return_stmt
     | output_stmt
     | input_stmt
     | expr_stmt // An expression can be a statement on its own (e.g., function call)

assignment_stmt: ID "=" expr // Assign any expression result
declaration_stmt: "new" TYPE ID ["=" expr] // Initialize with any expression result
if_stmt: "if" expr "then" block ["else" block] // Condition is any expression (type checking later)
while_stmt: "while" expr "do" block // Condition is any expression (type checking later)
return_stmt: "return" expr // Return any expression result
output_stmt: "output" expr // Output any expression result
input_stmt: "input" // Input doesn't produce an expression directly here
expr_stmt: expr // Any expression can be a statement


?expr: or_expr // Start with lowest precedence

?or_expr: and_expr ("or" and_expr)*
?and_expr: not_expr ("and" not_expr)*
?not_expr: "!" not_expr | comparison_expr
?comparison_expr: add_expr (("=="|"<"|">") add_expr)? // Allows only one comparison like original; change to * for chaining
?add_expr: mul_expr (("+"|"-") mul_expr)*
?mul_expr: unary_expr (("*"|"/"|"%") unary_expr)*
?unary_expr: "-" unary_expr | postfix_expr // Unary minus has high precedence
?postfix_expr: primary ( call_suffix | array_access_suffix )* // Function calls, array access
                | primary

// Postfix operations applied to a primary expression
call_suffix: "(" [arguments] ")"
array_access_suffix: "[" expr "]" // Standard array access by index

// Primary expressions: the highest precedence atoms
?primary: literal
        | ID           // Variable identifier
        | array_literal // Array literal like [1, 2, 3]
        | "(" expr ")" // Parenthesized expression

// Function call arguments
arguments: expr ("," expr)*

// Array literal definition
array_literal: "[" [array_elements] "]"
array_elements: expr ("," expr)*

// Literals grouped together
literal: integer | decimal | string | BOOLEAN


// Parameters in function definitions
params: param ("," param)*
param: TYPE ID array_suffix?
array_suffix: "[" "]"


// Types
TYPE: "boolean" | "integer" | "decimal" | "string" | "noType"

// Keywords for language and case style
LANG: "DK" | "EN"
CASE: "camelCase" | "snake_case"

// Literals & Terminals
integer: DIGIT+
decimal: DIGIT+"."DIGIT+
string: /"([^"\\]*(\\.[^"\\]*)*)"/
ID: LOWERCASE (LOWERCASE|UPPERCASE|DIGIT)* ( "_" (LOWERCASE|UPPERCASE|DIGIT)+ )*

BOOLEAN: "true" | "false"
LOWERCASE: "a".."z" | "æ" | "ø" | "å"
UPPERCASE: "A".."Z" | "Æ" | "Ø" | "Å"
DIGIT: "0".."9" // Simplified range
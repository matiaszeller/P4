%import common.NEWLINE
%import common.WS_INLINE
%import common.INT
%ignore WS_INLINE
%ignore COMMENT

start: syntax (COMMENT)* function_definition (NEWLINE)* (COMMENT)* function_definition*

syntax: "Language" LANG NEWLINE "Case" CASE NEWLINE

function_definition: _FUNCTION TYPE array_suffix? ID "(" [params] ")" block

block: "{" NEWLINE? stmt (NEWLINE stmt+)* NEWLINE? "}"

?stmt: assignment_stmt
     | declaration_stmt
     | if_stmt
     | while_stmt
     | return_stmt
     | output_stmt
     | expr_stmt

lvalue: ID array_access_suffix*
assignment_stmt: lvalue "=" expr
declaration_stmt: _NEW TYPE ID array_suffix* ["=" expr]
if_stmt: _IF expr _THEN block [_ELSE block]
while_stmt: _WHILE expr _DO block
return_stmt: _RETURN expr
output_stmt: _OUTPUT expr
expr_stmt: expr

input_expr: _INPUT
?expr: or_expr
?or_expr: and_expr ("or" and_expr)*
?and_expr: equality_expr ("and" equality_expr)*
?equality_expr: relational_expr (EQ_OP relational_expr)?
EQ_OP: "==" | "!="
?relational_expr: add_expr (REL_OP add_expr)?
REL_OP: "<" | ">" | "<=" | ">="
?add_expr: mul_expr (ADD_OP mul_expr)*
ADD_OP: "+" | "-"
?mul_expr: unary_expr (MUL_OP unary_expr)*
MUL_OP: "*" | "/" | "%"
?unary_expr: UMINUS unary_expr   -> uminus
           | "!" unary_expr      -> negate
           | postfix_expr
UMINUS: "-"
?postfix_expr: primary ( call_suffix | array_access_suffix )* | primary
call_suffix: "(" [arguments] ")"
array_access_suffix: "[" expr "]"
?primary: INT | ID | array_literal | "(" expr ")" | decimal | string | BOOLEAN | input_expr
arguments: expr ("," expr)*

array_literal: "[" [array_elements] "]"
array_elements: expr ("," expr)*
params: param ("," param)*
param: TYPE ID array_suffix?
array_suffix: "[" "]"

TYPE: "boolean" | "integer" | "decimal" | "string" | "noType"
LANG: "DK" | "EN"
CASE: "camelCase" | "snake_case"
decimal: INT"."INT
string: /"([^"\\]*(\\.[^"\\]*)*)"/
BOOLEAN: "true" | "false"
ID: /(?!(true|false|if|else|while|return|function|input|output|then|do)\b)[a-zæøå][a-zA-ZæøåÆØÅ0-9]*(?:_[a-zA-ZæøåÆØÅ0-9]+)*/
COMMENT: /(?:\n)?#[\s\S]*?#/
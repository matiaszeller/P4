// grammar.lark

// common tokens
%import common.NEWLINE
%import common.WS_INLINE
%import common.INT
%ignore WS_INLINE
%ignore COMMENT // For the syntax tree, can be removed if necessary

// Start Rule
start: syntax [COMMENT]* function_definition+ [NEWLINE]* [COMMENT]*

// Language and case parameters
syntax: "Language" LANG NEWLINE "Case" CASE NEWLINE

// Function definition
function_definition: "function" TYPE ID "(" [params] ")" block

// Block definition
block: "{" NEWLINE? stmt+ (NEWLINE stmt+)* NEWLINE? "}"

// Statements
?stmt: assignment_stmt
     | declaration_stmt
     | if_stmt
     | while_stmt
     | return_stmt
     | output_stmt
     | input_stmt
     | expr_stmt

assignment_stmt: ID "=" expr
declaration_stmt: "new" TYPE ID ["=" expr]
if_stmt: "if" expr "then" block ["else" block]
while_stmt: "while" expr "do" block
return_stmt: "return" expr
output_stmt: "output" expr
input_stmt: "input"
expr_stmt: expr


?expr: or_expr // Start with lowest precedence

?or_expr: and_expr ("or" and_expr)*
?and_expr: not_expr ("and" not_expr)*
?not_expr: "!" not_expr | comparison_expr
?comparison_expr: add_expr (("=="|"<"|">") add_expr)?
?add_expr: mul_expr (("+"|"-") mul_expr)*
?mul_expr: unary_expr (("*"|"/"|"%") unary_expr)*
?unary_expr: "-" unary_expr | postfix_expr
?postfix_expr: primary ( call_suffix | array_access_suffix )* | primary

// Postfix operations applied to a primary expression
call_suffix: "(" [arguments] ")"
array_access_suffix: "[" expr "]"

// Primary expressions: the highest precedence atoms
?primary: literal
        | ID
        | array_literal
        | "(" expr ")"

arguments: expr ("," expr)*

// Array literal definition
array_literal: "[" [array_elements] "]"
array_elements: expr ("," expr)*

// Literals grouped together
literal: integer | decimal | string | BOOLEAN


// Parameters in function definitions
params: param ("," param)*
param: TYPE ID array_suffix?
array_suffix: "[" "]"


// Types
TYPE: "boolean" | "integer" | "decimal" | "string" | "noType"

// Keywords for language and case style
LANG: "DK" | "EN"
CASE: "camelCase" | "snake_case"

// Literals & Terminals
integer: INT+
decimal: DIGIT+"."DIGIT+
string: /"([^"\\]*(\\.[^"\\]*)*)"/ // So strings are enclosed in "" and prevents early escape with \ escape characters
ID: LOWERCASE (LOWERCASE|UPPERCASE|DIGIT)* ( "_" (LOWERCASE|UPPERCASE|DIGIT)+ )*

BOOLEAN: "true" | "false"
LOWERCASE: "a".."z" | "æ" | "ø" | "å"
UPPERCASE: "A".."Z" | "Æ" | "Ø" | "Å"
DIGIT: "0".."9"

COMMENT: /(?:\n)?#[\s\S]*?#/ //Cursed Regex but it matches anything enclosed within # #
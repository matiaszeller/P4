// grammar.lark

// common tokens
%import common.NEWLINE
%import common.WS_INLINE
%import common.INT
%ignore WS_INLINE
%ignore COMMENT // For the syntax tree, can be removed if necessary

// Start Rule
start: syntax (COMMENT)* function_definition ((NEWLINE)* (COMMENT)* function_definition)*

// Language and case parameters
syntax: "Language" LANG NEWLINE "Case" CASE NEWLINE

// Function definition
function_definition: "function" TYPE array_suffix? ID "(" [params] ")" block

// Block definition
block: "{" NEWLINE? stmt (NEWLINE stmt+)* NEWLINE? "}"


// Statements
?stmt: assignment_stmt
     | declaration_stmt
     | if_stmt
     | while_stmt
     | return_stmt
     | output_stmt
     | input_stmt
     | expr_stmt

lvalue: ID array_access_suffix*
assignment_stmt: lvalue "=" (expr | input_stmt)
declaration_stmt: "new" TYPE ID array_suffix* ["=" (expr | input_stmt)]
if_stmt: "if" expr "then" block ["else" block]
while_stmt: "while" expr "do" block
return_stmt: "return" expr
output_stmt: "output" expr
input_stmt: "input"
expr_stmt: expr


// Expression Rules with explicit operator tokens

?expr: or_expr  // Start with lowest precedence

?or_expr: and_expr ("or" and_expr)*

?and_expr: equality_expr ("and" equality_expr)*

?equality_expr: relational_expr (EQ_OP relational_expr)?
EQ_OP: "==" | "!="

?relational_expr: add_expr (REL_OP add_expr)?
REL_OP: "<" | ">" | "<=" | ">="

?add_expr: mul_expr (ADD_OP mul_expr)*
ADD_OP: "+" | "-"

?mul_expr: unary_expr (MUL_OP unary_expr)*
MUL_OP: "*" | "/" | "%"

?unary_expr: UMINUS unary_expr   -> uminus
           | "!" unary_expr      -> negate
           | postfix_expr
UMINUS: "-"

?postfix_expr: primary ( call_suffix | array_access_suffix )* | primary

// Postfix operations applied to a primary expression
call_suffix: "(" [arguments] ")"
array_access_suffix: "[" expr "]"

// Primary expressions: the highest precedence atoms
?primary: INT
        | ID
        | array_literal
        | "(" expr ")"
        | decimal
        | string
        | BOOLEAN

arguments: expr ("," expr)*

// Array literal definition
array_literal: "[" [array_elements] "]"
array_elements: expr ("," expr)*

// Parameters in function definitions
params: param ("," param)*
param: TYPE ID array_suffix?
array_suffix: "[" "]"

// Types
TYPE: "boolean" | "integer" | "decimal" | "string" | "noType"

// Keywords for language and case style
LANG: "DK" | "EN"
CASE: "camelCase" | "snake_case"

// Literals & Terminals
decimal: INT"."INT
string: /"([^"\\]*(\\.[^"\\]*)*)"/   // Strings enclosed in "" with escapes
BOOLEAN: "true" | "false"
ID: /(?!(true|false|if|else|while|return|function|input|output|then|do)\b)[a-zæøå][a-zA-ZæøåÆØÅ0-9]*(?:_[a-zA-ZæøåÆØÅ0-9]+)*/
COMMENT: /(?:\n)?#[\s\S]*?#/ // Matches comments enclosed in # #